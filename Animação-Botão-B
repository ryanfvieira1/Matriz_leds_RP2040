// Inclusão das bibliotecas
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "pico/stdlib.h"
#include "hardware/pio.h"
#include "hardware/clocks.h"
#include "pio_matrix.pio.h"


#define NUM_PIXELS 25  // Total de LEDs da matriz 5x5
#define OUT_PIN 7  // Pino de saída onde a matriz está conectada
#define DEBOUNCE_TIME_MS 200 // Tempo para ignorar múltiplos cliques (evita bouncing)


const uint button_B = 6; // Botão B - GPIO6
const uint button_A = 5; // Botão A - GPIO5


// Função para converter RGB normalizado em valor de 32 bits
uint32_t matrix_rgb(double b, double r, double g) {
    unsigned char R = r * 255;
    unsigned char G = g * 255;
    unsigned char B = b * 255;
    return (G << 24) | (R << 16) | (B << 8);
}


// Função que envia os dados da matriz para o PIO
void desenho_pio(const double *desenho, PIO pio, uint sm, double r, double g, double b) {
    for (int i = 0; i < NUM_PIXELS; i++) {
         if (i % 2 == 0)
            valor_led = matrix_rgb(desenho[24 - i], r, g);
        else
            valor_led = matrix_rgb(0.0, desenho[24 - i], g);
        pio_sm_put_blocking(pio, sm, valor_led);
    }
}


// Animação do botão B (flecha)
void animacao_botao_1(PIO pio, uint sm) {
   
    // Frame 0
    {0.0,0.0,0.0,0.0,0.0,
    0.0,0.0,0.0,0.0,0.0,
    1.0,0.0,0.0,0.0,0.0,
    0.0,0.0,0.0,0.0,0.0,
    0.0,0.0,0.0,0.0,0.0},


    // Frame 1
    {0.0,0.0,0.0,0.0,0.0,
     0.0,1.0,0.0,0.0,0.0,
     1.0,1.0,0.0,0.0,0.0,
     0.0,1.0,0.0,0.0,0.0,
     0.0,0.0,0.0,0.0,0.0},


    // Frame 2
    {0.0,0.0,0.0,0.0,0.0,
     0.0,1.0,0.0,0.0,0.0,
     1.0,1.0,0.0,0.0,0.0,
     0.0,1.0,0.0,0.0,0.0,
     0.0,0.0,0.0,0.0,0.0},


    // Frame 3
    {0.0,0.0,0.0,0.0,0.0,
     0.0,1.0,0.0,0.0,0.0,
     1.0,1.0,1.0,1.0,0.0,
     0.0,1.0,0.0,0.0,0.0,
     0.0,0.0,0.0,0.0,0.0},


    // Frame 4
    {0.0,0.0,0.0,0.0,0.0,
     0.0,1.0,0.0,0.0,0.0,
     1.0,1.0,1.0,1.0,0.0,
     0.0,1.0,0.0,0.0,0.0,
     0.0,0.0,0.0,0.0,0.0},


}


// Frames da animação do botão A (explosão)
void animacao_botao_2(PIO pio, uint sm) {




int main() {
    PIO pio = pio0; // Usa o bloco PIO 0
    bool ok;
     uint32_t valor_led;
    double r = 1.0, g = 0.0, b = 0.0;


    ok = set_sys_clock_khz(128000, false);
    stdio_init_all();
    printf("Iniciando a transmissão PIO\n");
    if (ok) printf("Clock set to %ld\n", clock_get_hz(clk_sys));


    uint offset = pio_add_program(pio, &pio_matrix_program);
    uint sm = pio_claim_unused_sm(pio, true);
    pio_matrix_program_init(pio, sm, offset, OUT_PIN);


    gpio_init(button_B);
    gpio_set_dir(button_B, GPIO_IN);
    gpio_pull_up(button_B);


    gpio_init(button_A);
    gpio_set_dir(button_A, GPIO_IN);
    gpio_pull_up(button_A);


    while (true) {
        if (!gpio_get(button_A)) {
            animacao_botao_A(pio, sm); // Executa a animação do botão 2
        }
        else if (!gpio_get(button_B)) {
            animacao_botao_B(pio, sm); // Executa a animação do botão 1
        }


        sleep_ms(300);
    }
}
